1. UI 준비하기
1-1. 카운터 컴포넌트 만들기 components/Counter
1-2. 할 일 목록 컴포넌트 만들기 components/Todos

2. 리덕스 관련 코드 작성하기
2-1. counter 모듈 작성하기 modules/counter.js
액션 타입 정의하기
액션 생성 함수 만들기
초기 상태 및 리듀서 함수 만들기

2-2. todos 모듈 만들기  modules/todos.js
액션 타입 정의하기
액션 생성 함수 만들기
초기 상태 및 리듀서 함수 만들기

2-3. 루트 리듀서 만들기 modules/index.js

3. 리액트 애플리케이션에 리덕스 적용하기 src/index.js
3-1. 스토어 만들기 src/index.js
3-2. Provider 컴포넌트 사용하여 프로젝트에 리덕스 적용하기 src/index.js
3-3. Redux DevTools 설치 및 적용 yarn add redux-devtools-extension

4. 컨테이너 컴포넌트 만들기
4-1. CounterContainer 만들기  src/containers/CounterContainer.js
     a) connect 함수 사용하기     /or +6. Hooks를 사용하여 컨테이너 컴포넌트 만들기
     b) App 에서 Counter를 CounterContainer로 교체하기 (4가지 방식)

4-2. TodosContainer 만들기
     a) connect 함수 사용하기    / or +6. Hooks를 사용하여 컨테이너 컴포넌트 만들기
     b) App 에서 Todos 컴포넌트를 TodosContainer컴포넌트로 교체하기
    c) Todos 컴포넌트에서 받아 온 props를 사용해 구현하기
----------------------------------------------------------------------
+ 5. 리덕스 더 편하게 사용하기
1. redux-action 라이브러리 
	-액션 생성 함수를 더 짧은 코드로 작성할 수 있다.
	-리듀서 업데이트 작성시 switch/case 문이 아닌 handleActions함수 사용
	하여 각 액션마다 업데이트 함수 설정하는 형식으로 작성
1-1. 각 모듈에 적용하면 된다. 

2. immer 라이브러리
	-객체의 구조가 복잡해지거나 객체로 이루어진 배열을 다룰 경우,
	훨씬 편리하게 상태관리 가능하다. 	 
-----------------------------------------------------------------------
+ 6. Hooks를 사용하여 컨테이너 컴포넌트 만들기
- 리덕스 스토어와 연동된 컴포넌트 만들떄, connect 함수 X , 
	react-redux에서 제공하는 Hook사용
-----------------------------------------------------------------------
+7. useActions 유틸 Hook을 만들어서 사용하기

----------------------------------------------------------------------
<connect 함수 vs Hooks 사용하기>
1. connect 함수 사용시 해당 컨테이너 컴포넌트의 부모컴포넌트가 리렌더링 될 때
해당 컨데이터 컴포넌트의 props가 바뀌지 않았다면 리렌더링이 자동으로 방지되어 성능이
최적화된다.
2. useSelector를 사용하여 리덕스 상태를 조회했을 때는 이 최적화 작업이 자동으로
이루어 지지 않으므로, 성능 최적화를 위해서는 React.memo를 컨테이너 컴포넌트에 사용해 주어야 한다.



